/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.io.File;
import java.io.FileInputStream;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import model.Book;
import model.Users;
import service.BookInterface;
import service.UsersInterface;
import com.toedter.calendar.JDateChooser;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.util.List;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.commons.logging.LogFactory;
import org.apache.fontbox.type1.DamagedFontException;
/**
 *
 * @author ZIPTECH LTD
 */
public class AddBook extends javax.swing.JFrame {

    /**
     * Creates new form AddBook
     */
    public AddBook() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        booknametxt = new javax.swing.JTextField();
        authortxt = new javax.swing.JTextField();
        bookpdftxt = new javax.swing.JTextField();
        savebtn = new javax.swing.JButton();
        dateofrelease = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        bookcategorytxt = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        uploadbtn = new javax.swing.JButton();
        bookidtxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        updatebtn = new javax.swing.JButton();
        deletebtn = new javax.swing.JButton();
        downloadreport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel4.setText("Book Category");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel5.setText("Date Of Release");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel6.setText("Book PDF");

        savebtn.setText("SAVE");
        savebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel2.setText("Book Name");

        bookcategorytxt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Romance", "Literature", "Philosophy" }));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel3.setText("Author");

        uploadbtn.setText("Upload");
        uploadbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadbtnActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel7.setText("Book ID");

        updatebtn.setText("UPDATE");
        updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebtnActionPerformed(evt);
            }
        });

        deletebtn.setText("DELETE");
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });

        downloadreport.setText("Report");
        downloadreport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadreportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(savebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(updatebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addComponent(deletebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(176, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bookidtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(139, 139, 139))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(downloadreport)
                .addGap(41, 41, 41))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3)
                        .addComponent(jLabel5)
                        .addComponent(jLabel6)
                        .addComponent(jLabel4))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 176, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(booknametxt)
                        .addComponent(authortxt)
                        .addComponent(bookcategorytxt, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateofrelease, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bookpdftxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(39, 39, 39)
                    .addComponent(uploadbtn)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(395, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(bookidtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(savebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updatebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downloadreport)
                        .addGap(12, 12, 12)
                        .addComponent(deletebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(55, 55, 55))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(17, 17, 17)
                            .addComponent(jLabel2)
                            .addGap(41, 41, 41)
                            .addComponent(jLabel3)
                            .addGap(45, 45, 45)
                            .addComponent(jLabel4)
                            .addGap(49, 49, 49)
                            .addComponent(jLabel5)
                            .addGap(57, 57, 57)
                            .addComponent(jLabel6))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(booknametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(authortxt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(27, 27, 27)
                            .addComponent(bookcategorytxt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(dateofrelease, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(32, 32, 32)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(bookpdftxt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(uploadbtn))))
                    .addContainerGap(255, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void savebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebtnActionPerformed
        // TODO add your handling code here:

        try {
            if(booknametxt.getText().trim().isEmpty()
                || authortxt.getText().trim().isEmpty()
                || bookpdftxt.getText().trim().isEmpty()) 
 {

                JOptionPane.showMessageDialog(this, "Provide all information", "Data Required", JOptionPane.WARNING_MESSAGE );

            }
            else {
             Registry registry = LocateRegistry.getRegistry("127.0.0.1", 5000); 
            BookInterface intrf = (BookInterface)registry.lookup("Book");
            Book book = new Book();
            book.setBookID(bookidtxt.getText());
            book.setBookName(booknametxt.getText());
            book.setAuthor(authortxt.getText());
           // book.setDateReleased(dateofrelease.getDate());
            book.setDateCategory(bookcategorytxt.getSelectedItem().toString());
          
   String filePath = bookpdftxt.getText();
File pdfFile = new File(filePath);
FileInputStream inputStream = new FileInputStream(pdfFile);
byte[] fileContent = new byte[(int) pdfFile.length()];
inputStream.read(fileContent);
inputStream.close();

book.setBookPdf(fileContent);

            String feedback = intrf.registerBook(book);
             JOptionPane.showMessageDialog(this, feedback,"successful", JOptionPane.INFORMATION_MESSAGE);
            }
        }

        
 catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_savebtnActionPerformed

    
    private void uploadbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadbtnActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            // Do something with the selected file, for example:
            // display its path in a text field
            bookpdftxt.setText(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_uploadbtnActionPerformed

    private void updatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebtnActionPerformed
try {
        if (bookidtxt.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please provide a book ID", "Data Required", JOptionPane.WARNING_MESSAGE);
        } else {
            Registry registry = LocateRegistry.getRegistry("127.0.0.1", 5000);
            BookInterface intrf = (BookInterface) registry.lookup("Book");

            // Retrieve the existing book from the database
            String bookId = bookidtxt.getText();
            Book book = intrf.getBookById(bookId);

            if (book == null) {
                JOptionPane.showMessageDialog(this, "Book not found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                // Update the book information based on the user's input
                book.setBookName(booknametxt.getText());
                book.setAuthor(authortxt.getText());
                book.setDateCategory(bookcategorytxt.getSelectedItem().toString());

                // Call the updateBook() method of the BookInterface to update the book in the database
                String feedback = intrf.updateBook(book);
                JOptionPane.showMessageDialog(this, feedback, "Update Successful", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    }//GEN-LAST:event_updatebtnActionPerformed

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed
        // TODO add your handling code here:
        
        try {
        if (bookidtxt.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please provide a book ID", "Data Required", JOptionPane.WARNING_MESSAGE);
        } else {
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this book?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                Registry registry = LocateRegistry.getRegistry("127.0.0.1", 5000);
                BookInterface intrf = (BookInterface) registry.lookup("Book");

                String bookId = bookidtxt.getText();
                String feedback = intrf.deleteBook(bookId);

                if (feedback.equals("success")) {
                    JOptionPane.showMessageDialog(this, "Book deleted successfully", "Delete Successful", JOptionPane.INFORMATION_MESSAGE);
                    //clearFields(); // Optional: Clear the input fields after successful deletion
                } else {
                    JOptionPane.showMessageDialog(this, feedback, "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    }//GEN-LAST:event_deletebtnActionPerformed

    private void downloadreportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadreportActionPerformed
        // TODO add your handling code here:
        try {
        // Connect to the database and retrieve all the information from the table
        Registry registry = LocateRegistry.getRegistry("127.0.0.1", 5000);
        BookInterface intrf = (BookInterface) registry.lookup("Book");
        List<Book> books = intrf.getAllBook(); // Assuming you have a method to retrieve all books from the database

        // Create a new PDF document
        PDDocument document = new PDDocument();
        PDPage page = new PDPage(PDRectangle.A4);
        document.addPage(page);
        PDPageContentStream contentStream = new PDPageContentStream(document, page);

        // Set font and font size
        contentStream.setFont(PDType1Font.HELVETICA_BOLD, 12);

        // Set initial y-coordinate for content
        float y = page.getMediaBox().getHeight() - 50;

        // Draw header row
        contentStream.beginText();
        contentStream.newLineAtOffset(50, y);
        contentStream.showText("Book ID");
        contentStream.newLineAtOffset(100, 0);
        contentStream.showText("Book Name");
        contentStream.newLineAtOffset(100, 0);
        contentStream.showText("Author");
//        contentStream.newLineAtOffset(100, 0);
//        contentStream.showText("Category");
        contentStream.endText();
        y -= 20;

        // Draw book information
        for (Book book : books) {
            contentStream.beginText();
            contentStream.newLineAtOffset(50, y);
            contentStream.showText(String.valueOf(book.getBookID()));
            contentStream.newLineAtOffset(100, 0);
            contentStream.showText(book.getBookName());
            contentStream.newLineAtOffset(100, 0);
            contentStream.showText(book.getAuthor());
//            contentStream.newLineAtOffset(100, 0);
//            contentStream.showText(book.getDateCategory());
           contentStream.endText();
            y -= 20;
        }

        // Close the content stream
        contentStream.close();

        // Save the PDF document to a file
        File reportFile = new File("report.pdf");
        document.save(reportFile);
        document.close();

        JOptionPane.showMessageDialog(this, "Report downloaded successfully", "Download Successful", JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    }//GEN-LAST:event_downloadreportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField authortxt;
    private javax.swing.JComboBox<String> bookcategorytxt;
    private javax.swing.JTextField bookidtxt;
    private javax.swing.JTextField booknametxt;
    private javax.swing.JTextField bookpdftxt;
    private com.toedter.calendar.JDateChooser dateofrelease;
    private javax.swing.JButton deletebtn;
    private javax.swing.JButton downloadreport;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JButton savebtn;
    private javax.swing.JButton updatebtn;
    private javax.swing.JButton uploadbtn;
    // End of variables declaration//GEN-END:variables
}
