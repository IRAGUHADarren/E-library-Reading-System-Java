/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view;

import java.io.File;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.List;
import javax.swing.JOptionPane;
import model.Users;
import service.UsersInterface;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.commons.logging.LogFactory;
import org.apache.fontbox.type1.DamagedFontException;
import service.BookInterface;
import service.PublisherInterface;

/**
 *
 * @author ZIPTECH LTD
 */
public class UserReport extends javax.swing.JInternalFrame {

    /** Creates new form UserReport */
    public UserReport() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        downloadreport = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        downloadreport.setBackground(new java.awt.Color(142, 166, 125));
        downloadreport.setText("Report");
        downloadreport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadreportActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Click The Button To Download The Books Report");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(264, 264, 264)
                        .addComponent(downloadreport, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(274, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel1)
                .addGap(58, 58, 58)
                .addComponent(downloadreport, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(295, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void downloadreportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadreportActionPerformed
        // TODO add your handling code here:
        try {
            // Connect to the database and retrieve all the information from the table
            Registry registry = LocateRegistry.getRegistry("127.0.0.1", 5000);
            UsersInterface intrf = (UsersInterface) registry.lookup("Users");
            List<Users> users = intrf.getAllUsers(); // Assuming you have a method to retrieve all books from the database

            // Create a new PDF document
            PDDocument document = new PDDocument();
            PDPage page = new PDPage(PDRectangle.A3);
            document.addPage(page);
            PDPageContentStream contentStream = new PDPageContentStream(document, page);

            // Set font and font size
            contentStream.setFont(PDType1Font.TIMES_BOLD, 12);

            // Set initial y-coordinate for content
            float y = page.getMediaBox().getHeight() - 50;

            String additionalWords = "MICHA E-READING SYSTEM User Report ";
            contentStream.beginText();
            contentStream.newLineAtOffset(50, y);
            contentStream.setFont(PDType1Font.HELVETICA_BOLD, 16); // Setting a larger and bold font for the title
            contentStream.showText(additionalWords);
            contentStream.setFont(PDType1Font.HELVETICA, 12); // Resetting the font back to normal for the column headers
            contentStream.newLineAtOffset(0, -20); // Adjust the offset for the column headers
            contentStream.showText("User ID");
            contentStream.newLineAtOffset(100, 0);
            contentStream.showText("First Name");
            contentStream.newLineAtOffset(100, 0);
            contentStream.showText("Last Name");
            contentStream.newLineAtOffset(100, 0);
            contentStream.showText("Email");
            contentStream.newLineAtOffset(100, 0);
            contentStream.showText("Phone number"); // Assuming this is the column header for the PDF file
            contentStream.newLineAtOffset(100, 0);
            contentStream.showText("Role");
            contentStream.endText();
            y -= 40;

            // Draw book data rows
            for (Users user : users) {
                contentStream.beginText();
                contentStream.newLineAtOffset(50, y);
                contentStream.showText(String.valueOf(user.getUser_id()));
                contentStream.newLineAtOffset(100, 0);
                contentStream.showText(user.getFirstname());
                contentStream.newLineAtOffset(100, 0);
                contentStream.showText(user.getLastname());
                contentStream.newLineAtOffset(100, 0);
                contentStream.showText(user.getEmail());
                contentStream.newLineAtOffset(100, 0);
                contentStream.showText(user.getPhonenumber()); // Assuming this is the file name or path of the PDF file
                contentStream.newLineAtOffset(100, 0);
                contentStream.showText(user.getRole()); // Assuming this is the file name or path of the PDF file
                contentStream.newLineAtOffset(100, 0);

                contentStream.endText();
                y -= 20;
            }

            // Close the content stream
            contentStream.close();

            // Save the PDF document to a file
            File reportFile = new File("User Report.pdf");
            document.save(reportFile);
            document.close();

            JOptionPane.showMessageDialog(this, "Report downloaded successfully", "Download Successful", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_downloadreportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton downloadreport;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

}
